// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(uuid())
  email                 String       @unique
  password              String?
  role                  Role         @default(USER)
  companyId             String?
  company               Company?     @relation(fields: [companyId], references: [id])
  inviteToken           String?      @unique
  isActivated           Boolean      @default(false)
  createdAt             DateTime     @default(now())
  File                  File[]
  FileAccess            FileAccess[]
  invoice               Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId             String?
}

enum Role {
  ADMIN
  USER
}

model Company {
  id          String           @id @default(uuid())
  name        String           @unique
  email       String           @unique
  password    String
  country     String
  industry    String
  isActivated Boolean          @default(false)
  plan        SubscriptionPlan @default(FREE)
  subscriptionStartDate DateTime     @default(now())
  employees   User[]
  createdAt   DateTime         @default(now())
  Invoice     Invoice[]
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}

model File {
  id           String       @id @default(uuid())
  filename     String
  filepath     String
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
  uploadedById String
  visibility   Visibility   @default(PRIVATE)
  allowUsers   FileAccess[]
  createdAt    DateTime     @default(now())
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model FileAccess {
  id     String @id @default(uuid())
  fileId String
  userId String
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invoice {
  id             String   @id @default(uuid())
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  month          Int
  year           Int
  totalFiles     Int      @default(0)
  totalEmployees Int      @default(0)
  baseCost       Float
  extraFiles     Int      @default(0)
  extraCost      Float    @default(0)
  totalCost      Float
  createdAt      DateTime @default(now())
  User           User[]
}
